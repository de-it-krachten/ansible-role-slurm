---

# ------------------------------------------------------
# General
# ------------------------------------------------------

- name: Create directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ slurm_user }}"
    group: "{{ slurm_group }}"
    mode: "{{ item.mode | default('0755') }}"
  loop: "{{ slurm_dirs['slurmctld'] }}"

- name: Get slurmctl version
  ansible.builtin.command: slurmctld -V
  changed_when: false
  failed_when: false
  register: _slurmctl_version

# - name: JWT token authentication is available from 20.02
#   set_fact:
#     slurm_jwt: true
#   when: slurmctl_version is version('20.02', '>=')


# ------------------------------------------------------
# slurmctld
# ------------------------------------------------------

- name: Distribute JWT token
  ansible.builtin.copy:
    src: "{{ slurm_jwt_token }}"
    dest: /etc/slurm/jwt_hs256.key
    owner: root
    group: root
    mode: "0600"
  when: slurm_jwt
  register: _slurm_jwt

- name: Distribute {{ slurm_conf_dir }}/slurm.conf  # noqa name[template]
  ansible.builtin.template:
    src: slurm.conf.j2
    dest: "{{ slurm_conf_dir }}/slurm.conf"
    owner: "{{ slurm_user }}"
    group: "{{ slurm_group }}"
    mode: '0644'
  register: _slurmctld
  when: slurm_conf_update | bool

- name: Distribute {{ slurm_conf_dir }}/cgroup.conf  # noqa name[template]
  ansible.builtin.template:
    src: cgroup.conf.j2
    dest: "{{ slurm_conf_dir }}/cgroup.conf"
    owner: "{{ slurm_user }}"
    group: "{{ slurm_group }}"
    mode: '0600'
  register: _croup

- name: Enable slurmctld
  ansible.builtin.service:
    name: 'slurmctld'
    enabled: yes
    state: started

- name: Restart slurmctld  # noqa no-handler
  ansible.builtin.service:
    name: slurmctld
    state: restarted
  when: _slurm_jwt.changed or _slurmctld.changed or _croup.changed

- name: Wait for 15 seconds
  ansible.builtin.pause:
    seconds: 15

# ------------------------------------------------------
# Cluster + users
# ------------------------------------------------------

- name: Get slurm clusters
  ansible.builtin.command: /usr/bin/sacctmgr -p list cluster
  check_mode: no
  changed_when: no
  register: _slurm_clusters

- name: Add slurm cluster
  ansible.builtin.command: "/usr/bin/sacctmgr -i add cluster {{ slurm_cluster_name }}"
  changed_when: true
  when: _slurm_clusters.stdout is not search(slurm_cluster_name)
  notify: Restart slurmctld

- name: Get slurm accounts
  ansible.builtin.command: /usr/bin/sacctmgr -p list accounts
  check_mode: no
  changed_when: no
  register: _slurm_administrators

- name: Create slurm accounts
  ansible.builtin.command: "/usr/bin/sacctmgr -i add account {{ slurm_account_name }}"
  changed_when: true
  when: _slurm_administrators.stdout is not search(slurm_account_name)
  notify: Restart slurmctld

- name: Get all users
  ansible.builtin.command: "/usr/bin/sacctmgr -p list user"
  check_mode: no
  changed_when: no
  register: _slurm_users

- name: Recreate list of users that should be present of absent
  ansible.builtin.set_fact:
    __slurm_users: >-
      [
        {% for user in slurm_users %}
        {% if user.name is undefined %}
        {
          "name": "{{ user }}",
          "state": "present"
        }{% if not loop.last %},{%endif %}
        {% else %}
        {{ user }}{% if not loop.last %},{%endif %}
        {% endif %}
        {% endfor %}
      ]

- name: Create all users  # noqa no-free-form
  ansible.builtin.command: "/usr/bin/sacctmgr -i add user {{ item.name }} defaultaccount={{ slurm_account_name }} adminlevel=admin"
  changed_when: true
  when: item.state == 'present' and _slurm_users.stdout is not search(item.name)
  notify: Restart slurmctld
  loop: "{{ __slurm_users }}"

- name: Delete all users  # noqa no-free-form
  ansible.builtin.command: "/usr/bin/sacctmgr -i remove user {{ item.name }} defaultaccount={{ slurm_account_name }} adminlevel=admin"
  changed_when: true
  when: item.state == 'absent' and _slurm_users.stdout is search(item.name)
  notify: Restart slurmctld
  loop: "{{ __slurm_users }}"


# ------------------------------------------------------
# Firewall
# ------------------------------------------------------

- name: Open firewall ports for Slurm master
  ansible.builtin.include_role:
    name: deitkrachten.firewall
  vars:
    firewall_ports: "{{ slurm_firewall_ports['slurmctld'] }}"
  when:
    - slurm_firewall | bool
